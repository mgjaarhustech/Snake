syntax = "proto3";
package snake.v1;

import "google/protobuf/empty.proto";

enum ObsType {
  RAW_STATE   = 0;
  DENSE11     = 1;
  DENSE32     = 2;
  DENSE28_EGO = 3;
  RAYCASTS19  = 4;
  GRID_RGB    = 5;
}

enum Action {
  STRAIGHT   = 0;
  TURN_RIGHT = 1;
  TURN_LEFT  = 2;
}

message Spec {
  int32 cols = 1;
  int32 rows = 2;
  int32 timeout_mult = 3;
  repeated ObsType supported_obs = 4;
  repeated string reward_signals = 5; // names; order matches signals in StepResponse
}

message Point { int32 x = 1; int32 y = 2; }

message RawState {
  int32 cols = 1;
  int32 rows = 2;
  int32 step = 3;
  Point head = 4;
  string dir = 5;                // "RIGHT|DOWN|LEFT|UP"
  repeated Point body = 6;       // excludes head
  Point food = 7;
}

message Dense { repeated float data = 1; } // DENSE32 for now

message Observation {
  ObsType type = 1;
  oneof payload {
    RawState raw = 2;
    Dense dense = 3;
    bytes grid_rgb = 4; // reserved for future
  }
}

message ResetRequest {
  uint64 seed = 1;
  ObsType obs_type = 2;          // desired observation type
}

message StepRequest { Action action = 1; }

message StepResponse {
  Observation obs = 1;
  repeated float signals = 2;    // [eat_food, death, step_cost, toward_food, turning, timeout]
  bool done = 3;
  int32 score = 4;
  int32 length = 5;
  string death = 6;              // "", "wall", "self", "timeout"
  int32 steps = 7;
}

message ResetManyRequest { repeated uint64 seeds = 1; ObsType obs_type = 2; }
message StepManyRequest  { repeated Action actions = 1; }

message ManyResponse {
  repeated StepResponse envs = 1;
}

service SnakeEnv {
  rpc GetSpec  (google.protobuf.Empty) returns (Spec);
  rpc Reset    (ResetRequest)          returns (StepResponse);
  rpc Step     (StepRequest)           returns (StepResponse);

  // vectorized (optional; basic implementation provided)
  rpc ResetMany(ResetManyRequest)      returns (ManyResponse);
  rpc StepMany (StepManyRequest)       returns (ManyResponse);
}
