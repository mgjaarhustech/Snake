syntax = "proto3";
package snake.v1;
option csharp_namespace = "Snake.V1";

import "google/protobuf/empty.proto";

enum ObsType {
  RAW_STATE   = 0;
  DENSE11     = 1;
  DENSE32     = 2;
  DENSE28_EGO = 3;
  RAYCASTS19  = 4;
  GRID_RGB    = 5;
}

message Spec {
  int32 cols = 1;
  int32 rows = 2;
  int32 timeout_mult = 3;
  repeated ObsType supported_obs = 4;
  repeated string reward_signals = 5;
}

message Point { int32 x = 1; int32 y = 2; }

message RawState {
  int32 cols = 1;
  int32 rows = 2;
  int32 step = 3;
  Point head = 4;
  string dir = 5;
  repeated Point body = 6;
  Point food = 7;
}

message Dense { repeated float data = 1; }

message Observation {
  ObsType type = 1;
  oneof payload {
    RawState raw = 2;
    Dense dense = 3;
    bytes grid_rgb = 4;
  }
}

// --- Single ---
message ResetRequest {
  uint64 seed = 1;
  ObsType obs_type = 2;
  bool with_raw = 3; // populate StepResponse.raw_for_render
}

message StepRequest {
  int32 action = 1;  // 0=Straight, 1=TurnRight, 2=TurnLeft
  bool with_raw = 2; // populate StepResponse.raw_for_render
}

message StepResponse {
  Observation obs = 1;
  repeated float signals = 2;  // [eat_food, death, step_cost, toward_food, turning, timeout]
  bool done = 3;
  int32 score = 4;
  int32 length = 5;
  string death = 6;            // "", "wall", "self", "timeout"
  int32 steps = 7;

  // present iff with_raw=true
  RawState raw_for_render = 8;
}

// --- Bulk (vectorized) ---
message ResetManyRequest {
  repeated uint64 seeds = 1;   // optional; if empty, server will choose
  ObsType obs_type = 2;
  int32 count = 3;             // required > 0
  string session = 4;          // optional; if empty, server generates
  bool with_raw = 5;           // populate each env's raw_for_render
}

message StepManyRequest {
  repeated int32 actions = 1;  // len==1(broadcast) or == pool size
  string session = 2;          // required
  bool with_raw = 3;           // populate each env's raw_for_render
}

message ManyResponse {
  repeated StepResponse envs = 1; // one per env; dead envs return echo responses
  string session = 2;             // echo session id
}

service SnakeEnv {
  rpc GetSpec   (google.protobuf.Empty) returns (Spec);
  rpc Reset     (ResetRequest)          returns (StepResponse);
  rpc Step      (StepRequest)           returns (StepResponse);

  rpc ResetMany (ResetManyRequest)      returns (ManyResponse);
  rpc StepMany  (StepManyRequest)       returns (ManyResponse);
}